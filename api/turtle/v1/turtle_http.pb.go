// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.11.3
// source: turtle/v1/turtle.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTurtleEndApp = "/turtle.v1.turtle/EndApp"
const OperationTurtleStartApp = "/turtle.v1.turtle/StartApp"

type TurtleHTTPServer interface {
	// EndApp 关闭互玩
	EndApp(context.Context, *EndAppReq) (*emptypb.Empty, error)
	// StartApp 开启互玩
	StartApp(context.Context, *StartAppReq) (*StartAppResp, error)
}

func RegisterTurtleHTTPServer(s *http.Server, srv TurtleHTTPServer) {
	r := s.Route("/")
	r.POST("/start/App", _Turtle_StartApp0_HTTP_Handler(srv))
	r.POST("/end/App", _Turtle_EndApp0_HTTP_Handler(srv))
}

func _Turtle_StartApp0_HTTP_Handler(srv TurtleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in StartAppReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTurtleStartApp)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.StartApp(ctx, req.(*StartAppReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*StartAppResp)
		return ctx.Result(200, reply)
	}
}

func _Turtle_EndApp0_HTTP_Handler(srv TurtleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EndAppReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTurtleEndApp)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EndApp(ctx, req.(*EndAppReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type TurtleHTTPClient interface {
	EndApp(ctx context.Context, req *EndAppReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	StartApp(ctx context.Context, req *StartAppReq, opts ...http.CallOption) (rsp *StartAppResp, err error)
}

type TurtleHTTPClientImpl struct {
	cc *http.Client
}

func NewTurtleHTTPClient(client *http.Client) TurtleHTTPClient {
	return &TurtleHTTPClientImpl{client}
}

func (c *TurtleHTTPClientImpl) EndApp(ctx context.Context, in *EndAppReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/end/App"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTurtleEndApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TurtleHTTPClientImpl) StartApp(ctx context.Context, in *StartAppReq, opts ...http.CallOption) (*StartAppResp, error) {
	var out StartAppResp
	pattern := "/start/App"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTurtleStartApp))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
