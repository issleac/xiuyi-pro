// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v3.11.3
// source: api/turtle/v1/turtle.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTurtleGetTurtleList = "/turtle.v1.turtle/GetTurtleList"
const OperationTurtleSetTurtleBatch = "/turtle.v1.turtle/SetTurtleBatch"

type TurtleHTTPServer interface {
	// GetTurtleList 分页读取谜题
	GetTurtleList(context.Context, *GetTurtleListReq) (*GetTurtleListResp, error)
	// SetTurtleBatch 批量写入谜题
	SetTurtleBatch(context.Context, *SetTurtleBatchReq) (*emptypb.Empty, error)
}

func RegisterTurtleHTTPServer(s *http.Server, srv TurtleHTTPServer) {
	r := s.Route("/")
	r.POST("/set/turtle/batch", _Turtle_SetTurtleBatch0_HTTP_Handler(srv))
	r.GET("/get/turtle/list/{token}", _Turtle_GetTurtleList0_HTTP_Handler(srv))
}

func _Turtle_SetTurtleBatch0_HTTP_Handler(srv TurtleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetTurtleBatchReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTurtleSetTurtleBatch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetTurtleBatch(ctx, req.(*SetTurtleBatchReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Turtle_GetTurtleList0_HTTP_Handler(srv TurtleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTurtleListReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTurtleGetTurtleList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTurtleList(ctx, req.(*GetTurtleListReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTurtleListResp)
		return ctx.Result(200, reply)
	}
}

type TurtleHTTPClient interface {
	GetTurtleList(ctx context.Context, req *GetTurtleListReq, opts ...http.CallOption) (rsp *GetTurtleListResp, err error)
	SetTurtleBatch(ctx context.Context, req *SetTurtleBatchReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type TurtleHTTPClientImpl struct {
	cc *http.Client
}

func NewTurtleHTTPClient(client *http.Client) TurtleHTTPClient {
	return &TurtleHTTPClientImpl{client}
}

func (c *TurtleHTTPClientImpl) GetTurtleList(ctx context.Context, in *GetTurtleListReq, opts ...http.CallOption) (*GetTurtleListResp, error) {
	var out GetTurtleListResp
	pattern := "/get/turtle/list/{token}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTurtleGetTurtleList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TurtleHTTPClientImpl) SetTurtleBatch(ctx context.Context, in *SetTurtleBatchReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/set/turtle/batch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTurtleSetTurtleBatch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
