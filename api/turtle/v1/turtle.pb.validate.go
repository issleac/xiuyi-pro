// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/turtle/v1/turtle.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StartAppResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartAppResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartAppResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartAppRespMultiError, or
// nil if none found.
func (m *StartAppResp) ValidateAll() error {
	return m.validate(true)
}

func (m *StartAppResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGameId()) < 1 {
		err := StartAppRespValidationError{
			field:  "GameId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartAppRespMultiError(errors)
	}

	return nil
}

// StartAppRespMultiError is an error wrapping multiple validation errors
// returned by StartAppResp.ValidateAll() if the designated constraints aren't met.
type StartAppRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartAppRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartAppRespMultiError) AllErrors() []error { return m }

// StartAppRespValidationError is the validation error returned by
// StartAppResp.Validate if the designated constraints aren't met.
type StartAppRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartAppRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartAppRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartAppRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartAppRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartAppRespValidationError) ErrorName() string { return "StartAppRespValidationError" }

// Error satisfies the builtin error interface
func (e StartAppRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartAppResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartAppRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartAppRespValidationError{}

// Validate checks the field values on StartAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StartAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StartAppReqMultiError, or
// nil if none found.
func (m *StartAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *StartAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if utf8.RuneCountInString(m.GetUpId()) < 1 {
		err := StartAppReqValidationError{
			field:  "UpId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StartAppReqMultiError(errors)
	}

	return nil
}

// StartAppReqMultiError is an error wrapping multiple validation errors
// returned by StartAppReq.ValidateAll() if the designated constraints aren't met.
type StartAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartAppReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartAppReqMultiError) AllErrors() []error { return m }

// StartAppReqValidationError is the validation error returned by
// StartAppReq.Validate if the designated constraints aren't met.
type StartAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartAppReqValidationError) ErrorName() string { return "StartAppReqValidationError" }

// Error satisfies the builtin error interface
func (e StartAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartAppReqValidationError{}

// Validate checks the field values on EndAppReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EndAppReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EndAppReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EndAppReqMultiError, or nil
// if none found.
func (m *EndAppReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EndAppReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGameId()) < 1 {
		err := EndAppReqValidationError{
			field:  "GameId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EndAppReqMultiError(errors)
	}

	return nil
}

// EndAppReqMultiError is an error wrapping multiple validation errors returned
// by EndAppReq.ValidateAll() if the designated constraints aren't met.
type EndAppReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EndAppReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EndAppReqMultiError) AllErrors() []error { return m }

// EndAppReqValidationError is the validation error returned by
// EndAppReq.Validate if the designated constraints aren't met.
type EndAppReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EndAppReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EndAppReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EndAppReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EndAppReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EndAppReqValidationError) ErrorName() string { return "EndAppReqValidationError" }

// Error satisfies the builtin error interface
func (e EndAppReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEndAppReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EndAppReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EndAppReqValidationError{}

// Validate checks the field values on GetTurtleListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTurtleListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTurtleListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTurtleListReqMultiError, or nil if none found.
func (m *GetTurtleListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTurtleListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for State

	// no validation rules for Category

	if len(errors) > 0 {
		return GetTurtleListReqMultiError(errors)
	}

	return nil
}

// GetTurtleListReqMultiError is an error wrapping multiple validation errors
// returned by GetTurtleListReq.ValidateAll() if the designated constraints
// aren't met.
type GetTurtleListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTurtleListReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTurtleListReqMultiError) AllErrors() []error { return m }

// GetTurtleListReqValidationError is the validation error returned by
// GetTurtleListReq.Validate if the designated constraints aren't met.
type GetTurtleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTurtleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTurtleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTurtleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTurtleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTurtleListReqValidationError) ErrorName() string { return "GetTurtleListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetTurtleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTurtleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTurtleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTurtleListReqValidationError{}

// Validate checks the field values on GetTurtleListResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTurtleListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTurtleListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTurtleListRespMultiError, or nil if none found.
func (m *GetTurtleListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTurtleListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTurtles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTurtleListRespValidationError{
						field:  fmt.Sprintf("Turtles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTurtleListRespValidationError{
						field:  fmt.Sprintf("Turtles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTurtleListRespValidationError{
					field:  fmt.Sprintf("Turtles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTurtleListRespMultiError(errors)
	}

	return nil
}

// GetTurtleListRespMultiError is an error wrapping multiple validation errors
// returned by GetTurtleListResp.ValidateAll() if the designated constraints
// aren't met.
type GetTurtleListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTurtleListRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTurtleListRespMultiError) AllErrors() []error { return m }

// GetTurtleListRespValidationError is the validation error returned by
// GetTurtleListResp.Validate if the designated constraints aren't met.
type GetTurtleListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTurtleListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTurtleListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTurtleListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTurtleListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTurtleListRespValidationError) ErrorName() string {
	return "GetTurtleListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetTurtleListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTurtleListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTurtleListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTurtleListRespValidationError{}

// Validate checks the field values on SetTurtleBatchReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetTurtleBatchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetTurtleBatchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetTurtleBatchReqMultiError, or nil if none found.
func (m *SetTurtleBatchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetTurtleBatchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTurtles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetTurtleBatchReqValidationError{
						field:  fmt.Sprintf("Turtles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetTurtleBatchReqValidationError{
						field:  fmt.Sprintf("Turtles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetTurtleBatchReqValidationError{
					field:  fmt.Sprintf("Turtles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetTurtleBatchReqMultiError(errors)
	}

	return nil
}

// SetTurtleBatchReqMultiError is an error wrapping multiple validation errors
// returned by SetTurtleBatchReq.ValidateAll() if the designated constraints
// aren't met.
type SetTurtleBatchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetTurtleBatchReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetTurtleBatchReqMultiError) AllErrors() []error { return m }

// SetTurtleBatchReqValidationError is the validation error returned by
// SetTurtleBatchReq.Validate if the designated constraints aren't met.
type SetTurtleBatchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTurtleBatchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTurtleBatchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTurtleBatchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTurtleBatchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTurtleBatchReqValidationError) ErrorName() string {
	return "SetTurtleBatchReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetTurtleBatchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTurtleBatchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTurtleBatchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTurtleBatchReqValidationError{}

// Validate checks the field values on Turtle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Turtle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Turtle with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TurtleMultiError, or nil if none found.
func (m *Turtle) ValidateAll() error {
	return m.validate(true)
}

func (m *Turtle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Qid

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := TurtleValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 1 {
		err := TurtleValidationError{
			field:  "Content",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAnswer()) < 1 {
		err := TurtleValidationError{
			field:  "Answer",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := Turtle_Category_name[int32(m.GetCategory())]; !ok {
		err := TurtleValidationError{
			field:  "Category",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreator()) < 1 {
		err := TurtleValidationError{
			field:  "Creator",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return TurtleMultiError(errors)
	}

	return nil
}

// TurtleMultiError is an error wrapping multiple validation errors returned by
// Turtle.ValidateAll() if the designated constraints aren't met.
type TurtleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TurtleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TurtleMultiError) AllErrors() []error { return m }

// TurtleValidationError is the validation error returned by Turtle.Validate if
// the designated constraints aren't met.
type TurtleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TurtleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TurtleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TurtleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TurtleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TurtleValidationError) ErrorName() string { return "TurtleValidationError" }

// Error satisfies the builtin error interface
func (e TurtleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTurtle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TurtleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TurtleValidationError{}
