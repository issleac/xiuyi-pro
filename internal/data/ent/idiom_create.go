// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"xiuyiPro/internal/data/ent/idiom"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IdiomCreate is the builder for creating a Idiom entity.
type IdiomCreate struct {
	config
	mutation *IdiomMutation
	hooks    []Hook
}

// SetIid sets the "iid" field.
func (ic *IdiomCreate) SetIid(s string) *IdiomCreate {
	ic.mutation.SetIid(s)
	return ic
}

// SetAnswer sets the "answer" field.
func (ic *IdiomCreate) SetAnswer(s string) *IdiomCreate {
	ic.mutation.SetAnswer(s)
	return ic
}

// SetImage sets the "image" field.
func (ic *IdiomCreate) SetImage(s string) *IdiomCreate {
	ic.mutation.SetImage(s)
	return ic
}

// SetDifficulty sets the "difficulty" field.
func (ic *IdiomCreate) SetDifficulty(i int32) *IdiomCreate {
	ic.mutation.SetDifficulty(i)
	return ic
}

// SetCreator sets the "creator" field.
func (ic *IdiomCreate) SetCreator(s string) *IdiomCreate {
	ic.mutation.SetCreator(s)
	return ic
}

// SetState sets the "state" field.
func (ic *IdiomCreate) SetState(i int32) *IdiomCreate {
	ic.mutation.SetState(i)
	return ic
}

// SetCtime sets the "ctime" field.
func (ic *IdiomCreate) SetCtime(t time.Time) *IdiomCreate {
	ic.mutation.SetCtime(t)
	return ic
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (ic *IdiomCreate) SetNillableCtime(t *time.Time) *IdiomCreate {
	if t != nil {
		ic.SetCtime(*t)
	}
	return ic
}

// SetMtime sets the "mtime" field.
func (ic *IdiomCreate) SetMtime(t time.Time) *IdiomCreate {
	ic.mutation.SetMtime(t)
	return ic
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (ic *IdiomCreate) SetNillableMtime(t *time.Time) *IdiomCreate {
	if t != nil {
		ic.SetMtime(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *IdiomCreate) SetID(i int64) *IdiomCreate {
	ic.mutation.SetID(i)
	return ic
}

// Mutation returns the IdiomMutation object of the builder.
func (ic *IdiomCreate) Mutation() *IdiomMutation {
	return ic.mutation
}

// Save creates the Idiom in the database.
func (ic *IdiomCreate) Save(ctx context.Context) (*Idiom, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IdiomCreate) SaveX(ctx context.Context) *Idiom {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IdiomCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IdiomCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IdiomCreate) defaults() {
	if _, ok := ic.mutation.Ctime(); !ok {
		v := idiom.DefaultCtime()
		ic.mutation.SetCtime(v)
	}
	if _, ok := ic.mutation.Mtime(); !ok {
		v := idiom.DefaultMtime()
		ic.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IdiomCreate) check() error {
	if _, ok := ic.mutation.Iid(); !ok {
		return &ValidationError{Name: "iid", err: errors.New(`ent: missing required field "Idiom.iid"`)}
	}
	if _, ok := ic.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "Idiom.answer"`)}
	}
	if _, ok := ic.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Idiom.image"`)}
	}
	if _, ok := ic.mutation.Difficulty(); !ok {
		return &ValidationError{Name: "difficulty", err: errors.New(`ent: missing required field "Idiom.difficulty"`)}
	}
	if _, ok := ic.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required field "Idiom.creator"`)}
	}
	if _, ok := ic.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Idiom.state"`)}
	}
	if _, ok := ic.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "Idiom.ctime"`)}
	}
	if _, ok := ic.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "Idiom.mtime"`)}
	}
	return nil
}

func (ic *IdiomCreate) sqlSave(ctx context.Context) (*Idiom, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IdiomCreate) createSpec() (*Idiom, *sqlgraph.CreateSpec) {
	var (
		_node = &Idiom{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(idiom.Table, sqlgraph.NewFieldSpec(idiom.FieldID, field.TypeInt64))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Iid(); ok {
		_spec.SetField(idiom.FieldIid, field.TypeString, value)
		_node.Iid = value
	}
	if value, ok := ic.mutation.Answer(); ok {
		_spec.SetField(idiom.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	if value, ok := ic.mutation.Image(); ok {
		_spec.SetField(idiom.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := ic.mutation.Difficulty(); ok {
		_spec.SetField(idiom.FieldDifficulty, field.TypeInt32, value)
		_node.Difficulty = value
	}
	if value, ok := ic.mutation.Creator(); ok {
		_spec.SetField(idiom.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := ic.mutation.State(); ok {
		_spec.SetField(idiom.FieldState, field.TypeInt32, value)
		_node.State = value
	}
	if value, ok := ic.mutation.Ctime(); ok {
		_spec.SetField(idiom.FieldCtime, field.TypeTime, value)
		_node.Ctime = value
	}
	if value, ok := ic.mutation.Mtime(); ok {
		_spec.SetField(idiom.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	return _node, _spec
}

// IdiomCreateBulk is the builder for creating many Idiom entities in bulk.
type IdiomCreateBulk struct {
	config
	err      error
	builders []*IdiomCreate
}

// Save creates the Idiom entities in the database.
func (icb *IdiomCreateBulk) Save(ctx context.Context) ([]*Idiom, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Idiom, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IdiomMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IdiomCreateBulk) SaveX(ctx context.Context) []*Idiom {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IdiomCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IdiomCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
