// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"xiuyiPro/internal/data/ent/predicate"
	"xiuyiPro/internal/data/ent/turtle"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TurtleUpdate is the builder for updating Turtle entities.
type TurtleUpdate struct {
	config
	hooks    []Hook
	mutation *TurtleMutation
}

// Where appends a list predicates to the TurtleUpdate builder.
func (tu *TurtleUpdate) Where(ps ...predicate.Turtle) *TurtleUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetQid sets the "qid" field.
func (tu *TurtleUpdate) SetQid(s string) *TurtleUpdate {
	tu.mutation.SetQid(s)
	return tu
}

// SetNillableQid sets the "qid" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableQid(s *string) *TurtleUpdate {
	if s != nil {
		tu.SetQid(*s)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *TurtleUpdate) SetTitle(s string) *TurtleUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableTitle(s *string) *TurtleUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetContent sets the "content" field.
func (tu *TurtleUpdate) SetContent(s string) *TurtleUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableContent(s *string) *TurtleUpdate {
	if s != nil {
		tu.SetContent(*s)
	}
	return tu
}

// SetAnswer sets the "answer" field.
func (tu *TurtleUpdate) SetAnswer(s string) *TurtleUpdate {
	tu.mutation.SetAnswer(s)
	return tu
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableAnswer(s *string) *TurtleUpdate {
	if s != nil {
		tu.SetAnswer(*s)
	}
	return tu
}

// SetCategory sets the "category" field.
func (tu *TurtleUpdate) SetCategory(i int32) *TurtleUpdate {
	tu.mutation.ResetCategory()
	tu.mutation.SetCategory(i)
	return tu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableCategory(i *int32) *TurtleUpdate {
	if i != nil {
		tu.SetCategory(*i)
	}
	return tu
}

// AddCategory adds i to the "category" field.
func (tu *TurtleUpdate) AddCategory(i int32) *TurtleUpdate {
	tu.mutation.AddCategory(i)
	return tu
}

// SetCreator sets the "creator" field.
func (tu *TurtleUpdate) SetCreator(s string) *TurtleUpdate {
	tu.mutation.SetCreator(s)
	return tu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableCreator(s *string) *TurtleUpdate {
	if s != nil {
		tu.SetCreator(*s)
	}
	return tu
}

// SetState sets the "state" field.
func (tu *TurtleUpdate) SetState(i int32) *TurtleUpdate {
	tu.mutation.ResetState()
	tu.mutation.SetState(i)
	return tu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableState(i *int32) *TurtleUpdate {
	if i != nil {
		tu.SetState(*i)
	}
	return tu
}

// AddState adds i to the "state" field.
func (tu *TurtleUpdate) AddState(i int32) *TurtleUpdate {
	tu.mutation.AddState(i)
	return tu
}

// SetCtime sets the "ctime" field.
func (tu *TurtleUpdate) SetCtime(t time.Time) *TurtleUpdate {
	tu.mutation.SetCtime(t)
	return tu
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableCtime(t *time.Time) *TurtleUpdate {
	if t != nil {
		tu.SetCtime(*t)
	}
	return tu
}

// SetMtime sets the "mtime" field.
func (tu *TurtleUpdate) SetMtime(t time.Time) *TurtleUpdate {
	tu.mutation.SetMtime(t)
	return tu
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (tu *TurtleUpdate) SetNillableMtime(t *time.Time) *TurtleUpdate {
	if t != nil {
		tu.SetMtime(*t)
	}
	return tu
}

// Mutation returns the TurtleMutation object of the builder.
func (tu *TurtleUpdate) Mutation() *TurtleMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TurtleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TurtleUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TurtleUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TurtleUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TurtleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(turtle.Table, turtle.Columns, sqlgraph.NewFieldSpec(turtle.FieldID, field.TypeInt64))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Qid(); ok {
		_spec.SetField(turtle.FieldQid, field.TypeString, value)
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(turtle.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(turtle.FieldContent, field.TypeString, value)
	}
	if value, ok := tu.mutation.Answer(); ok {
		_spec.SetField(turtle.FieldAnswer, field.TypeString, value)
	}
	if value, ok := tu.mutation.Category(); ok {
		_spec.SetField(turtle.FieldCategory, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedCategory(); ok {
		_spec.AddField(turtle.FieldCategory, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.Creator(); ok {
		_spec.SetField(turtle.FieldCreator, field.TypeString, value)
	}
	if value, ok := tu.mutation.State(); ok {
		_spec.SetField(turtle.FieldState, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.AddedState(); ok {
		_spec.AddField(turtle.FieldState, field.TypeInt32, value)
	}
	if value, ok := tu.mutation.Ctime(); ok {
		_spec.SetField(turtle.FieldCtime, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Mtime(); ok {
		_spec.SetField(turtle.FieldMtime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{turtle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TurtleUpdateOne is the builder for updating a single Turtle entity.
type TurtleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TurtleMutation
}

// SetQid sets the "qid" field.
func (tuo *TurtleUpdateOne) SetQid(s string) *TurtleUpdateOne {
	tuo.mutation.SetQid(s)
	return tuo
}

// SetNillableQid sets the "qid" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableQid(s *string) *TurtleUpdateOne {
	if s != nil {
		tuo.SetQid(*s)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TurtleUpdateOne) SetTitle(s string) *TurtleUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableTitle(s *string) *TurtleUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetContent sets the "content" field.
func (tuo *TurtleUpdateOne) SetContent(s string) *TurtleUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableContent(s *string) *TurtleUpdateOne {
	if s != nil {
		tuo.SetContent(*s)
	}
	return tuo
}

// SetAnswer sets the "answer" field.
func (tuo *TurtleUpdateOne) SetAnswer(s string) *TurtleUpdateOne {
	tuo.mutation.SetAnswer(s)
	return tuo
}

// SetNillableAnswer sets the "answer" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableAnswer(s *string) *TurtleUpdateOne {
	if s != nil {
		tuo.SetAnswer(*s)
	}
	return tuo
}

// SetCategory sets the "category" field.
func (tuo *TurtleUpdateOne) SetCategory(i int32) *TurtleUpdateOne {
	tuo.mutation.ResetCategory()
	tuo.mutation.SetCategory(i)
	return tuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableCategory(i *int32) *TurtleUpdateOne {
	if i != nil {
		tuo.SetCategory(*i)
	}
	return tuo
}

// AddCategory adds i to the "category" field.
func (tuo *TurtleUpdateOne) AddCategory(i int32) *TurtleUpdateOne {
	tuo.mutation.AddCategory(i)
	return tuo
}

// SetCreator sets the "creator" field.
func (tuo *TurtleUpdateOne) SetCreator(s string) *TurtleUpdateOne {
	tuo.mutation.SetCreator(s)
	return tuo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableCreator(s *string) *TurtleUpdateOne {
	if s != nil {
		tuo.SetCreator(*s)
	}
	return tuo
}

// SetState sets the "state" field.
func (tuo *TurtleUpdateOne) SetState(i int32) *TurtleUpdateOne {
	tuo.mutation.ResetState()
	tuo.mutation.SetState(i)
	return tuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableState(i *int32) *TurtleUpdateOne {
	if i != nil {
		tuo.SetState(*i)
	}
	return tuo
}

// AddState adds i to the "state" field.
func (tuo *TurtleUpdateOne) AddState(i int32) *TurtleUpdateOne {
	tuo.mutation.AddState(i)
	return tuo
}

// SetCtime sets the "ctime" field.
func (tuo *TurtleUpdateOne) SetCtime(t time.Time) *TurtleUpdateOne {
	tuo.mutation.SetCtime(t)
	return tuo
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableCtime(t *time.Time) *TurtleUpdateOne {
	if t != nil {
		tuo.SetCtime(*t)
	}
	return tuo
}

// SetMtime sets the "mtime" field.
func (tuo *TurtleUpdateOne) SetMtime(t time.Time) *TurtleUpdateOne {
	tuo.mutation.SetMtime(t)
	return tuo
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (tuo *TurtleUpdateOne) SetNillableMtime(t *time.Time) *TurtleUpdateOne {
	if t != nil {
		tuo.SetMtime(*t)
	}
	return tuo
}

// Mutation returns the TurtleMutation object of the builder.
func (tuo *TurtleUpdateOne) Mutation() *TurtleMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TurtleUpdate builder.
func (tuo *TurtleUpdateOne) Where(ps ...predicate.Turtle) *TurtleUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TurtleUpdateOne) Select(field string, fields ...string) *TurtleUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Turtle entity.
func (tuo *TurtleUpdateOne) Save(ctx context.Context) (*Turtle, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TurtleUpdateOne) SaveX(ctx context.Context) *Turtle {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TurtleUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TurtleUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TurtleUpdateOne) sqlSave(ctx context.Context) (_node *Turtle, err error) {
	_spec := sqlgraph.NewUpdateSpec(turtle.Table, turtle.Columns, sqlgraph.NewFieldSpec(turtle.FieldID, field.TypeInt64))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Turtle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, turtle.FieldID)
		for _, f := range fields {
			if !turtle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != turtle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Qid(); ok {
		_spec.SetField(turtle.FieldQid, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(turtle.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(turtle.FieldContent, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Answer(); ok {
		_spec.SetField(turtle.FieldAnswer, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Category(); ok {
		_spec.SetField(turtle.FieldCategory, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedCategory(); ok {
		_spec.AddField(turtle.FieldCategory, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.Creator(); ok {
		_spec.SetField(turtle.FieldCreator, field.TypeString, value)
	}
	if value, ok := tuo.mutation.State(); ok {
		_spec.SetField(turtle.FieldState, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.AddedState(); ok {
		_spec.AddField(turtle.FieldState, field.TypeInt32, value)
	}
	if value, ok := tuo.mutation.Ctime(); ok {
		_spec.SetField(turtle.FieldCtime, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Mtime(); ok {
		_spec.SetField(turtle.FieldMtime, field.TypeTime, value)
	}
	_node = &Turtle{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{turtle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
