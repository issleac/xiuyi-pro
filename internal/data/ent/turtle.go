// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"xiuyiPro/internal/data/ent/turtle"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Turtle is the model entity for the Turtle schema.
type Turtle struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Qid holds the value of the "qid" field.
	Qid string `json:"qid,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer string `json:"answer,omitempty"`
	// Category holds the value of the "category" field.
	Category int32 `json:"category,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// State holds the value of the "state" field.
	State int32 `json:"state,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime time.Time `json:"ctime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime        time.Time `json:"mtime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Turtle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case turtle.FieldID, turtle.FieldCategory, turtle.FieldState:
			values[i] = new(sql.NullInt64)
		case turtle.FieldQid, turtle.FieldTitle, turtle.FieldContent, turtle.FieldAnswer, turtle.FieldCreator:
			values[i] = new(sql.NullString)
		case turtle.FieldCtime, turtle.FieldMtime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Turtle fields.
func (t *Turtle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case turtle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int64(value.Int64)
		case turtle.FieldQid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field qid", values[i])
			} else if value.Valid {
				t.Qid = value.String
			}
		case turtle.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case turtle.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				t.Content = value.String
			}
		case turtle.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				t.Answer = value.String
			}
		case turtle.FieldCategory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				t.Category = int32(value.Int64)
			}
		case turtle.FieldCreator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[i])
			} else if value.Valid {
				t.Creator = value.String
			}
		case turtle.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				t.State = int32(value.Int64)
			}
		case turtle.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				t.Ctime = value.Time
			}
		case turtle.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				t.Mtime = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Turtle.
// This includes values selected through modifiers, order, etc.
func (t *Turtle) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Turtle.
// Note that you need to call Turtle.Unwrap() before calling this method if this Turtle
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Turtle) Update() *TurtleUpdateOne {
	return NewTurtleClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Turtle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Turtle) Unwrap() *Turtle {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Turtle is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Turtle) String() string {
	var builder strings.Builder
	builder.WriteString("Turtle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("qid=")
	builder.WriteString(t.Qid)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(t.Content)
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(t.Answer)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(fmt.Sprintf("%v", t.Category))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(t.Creator)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", t.State))
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(t.Ctime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(t.Mtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Turtles is a parsable slice of Turtle.
type Turtles []*Turtle
