// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"xiuyiPro/internal/data/ent/turtle"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TurtleCreate is the builder for creating a Turtle entity.
type TurtleCreate struct {
	config
	mutation *TurtleMutation
	hooks    []Hook
}

// SetQid sets the "qid" field.
func (tc *TurtleCreate) SetQid(s string) *TurtleCreate {
	tc.mutation.SetQid(s)
	return tc
}

// SetTitle sets the "title" field.
func (tc *TurtleCreate) SetTitle(s string) *TurtleCreate {
	tc.mutation.SetTitle(s)
	return tc
}

// SetContent sets the "content" field.
func (tc *TurtleCreate) SetContent(s string) *TurtleCreate {
	tc.mutation.SetContent(s)
	return tc
}

// SetAnswer sets the "answer" field.
func (tc *TurtleCreate) SetAnswer(s string) *TurtleCreate {
	tc.mutation.SetAnswer(s)
	return tc
}

// SetCategory sets the "category" field.
func (tc *TurtleCreate) SetCategory(i int32) *TurtleCreate {
	tc.mutation.SetCategory(i)
	return tc
}

// SetCreator sets the "creator" field.
func (tc *TurtleCreate) SetCreator(s string) *TurtleCreate {
	tc.mutation.SetCreator(s)
	return tc
}

// SetState sets the "state" field.
func (tc *TurtleCreate) SetState(i int32) *TurtleCreate {
	tc.mutation.SetState(i)
	return tc
}

// SetCtime sets the "ctime" field.
func (tc *TurtleCreate) SetCtime(t time.Time) *TurtleCreate {
	tc.mutation.SetCtime(t)
	return tc
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (tc *TurtleCreate) SetNillableCtime(t *time.Time) *TurtleCreate {
	if t != nil {
		tc.SetCtime(*t)
	}
	return tc
}

// SetMtime sets the "mtime" field.
func (tc *TurtleCreate) SetMtime(t time.Time) *TurtleCreate {
	tc.mutation.SetMtime(t)
	return tc
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (tc *TurtleCreate) SetNillableMtime(t *time.Time) *TurtleCreate {
	if t != nil {
		tc.SetMtime(*t)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TurtleCreate) SetID(i int64) *TurtleCreate {
	tc.mutation.SetID(i)
	return tc
}

// Mutation returns the TurtleMutation object of the builder.
func (tc *TurtleCreate) Mutation() *TurtleMutation {
	return tc.mutation
}

// Save creates the Turtle in the database.
func (tc *TurtleCreate) Save(ctx context.Context) (*Turtle, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TurtleCreate) SaveX(ctx context.Context) *Turtle {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TurtleCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TurtleCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TurtleCreate) defaults() {
	if _, ok := tc.mutation.Ctime(); !ok {
		v := turtle.DefaultCtime()
		tc.mutation.SetCtime(v)
	}
	if _, ok := tc.mutation.Mtime(); !ok {
		v := turtle.DefaultMtime()
		tc.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TurtleCreate) check() error {
	if _, ok := tc.mutation.Qid(); !ok {
		return &ValidationError{Name: "qid", err: errors.New(`ent: missing required field "Turtle.qid"`)}
	}
	if _, ok := tc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Turtle.title"`)}
	}
	if _, ok := tc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Turtle.content"`)}
	}
	if _, ok := tc.mutation.Answer(); !ok {
		return &ValidationError{Name: "answer", err: errors.New(`ent: missing required field "Turtle.answer"`)}
	}
	if _, ok := tc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Turtle.category"`)}
	}
	if _, ok := tc.mutation.Creator(); !ok {
		return &ValidationError{Name: "creator", err: errors.New(`ent: missing required field "Turtle.creator"`)}
	}
	if _, ok := tc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Turtle.state"`)}
	}
	if _, ok := tc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "Turtle.ctime"`)}
	}
	if _, ok := tc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "Turtle.mtime"`)}
	}
	return nil
}

func (tc *TurtleCreate) sqlSave(ctx context.Context) (*Turtle, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TurtleCreate) createSpec() (*Turtle, *sqlgraph.CreateSpec) {
	var (
		_node = &Turtle{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(turtle.Table, sqlgraph.NewFieldSpec(turtle.FieldID, field.TypeInt64))
	)
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.Qid(); ok {
		_spec.SetField(turtle.FieldQid, field.TypeString, value)
		_node.Qid = value
	}
	if value, ok := tc.mutation.Title(); ok {
		_spec.SetField(turtle.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := tc.mutation.Content(); ok {
		_spec.SetField(turtle.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := tc.mutation.Answer(); ok {
		_spec.SetField(turtle.FieldAnswer, field.TypeString, value)
		_node.Answer = value
	}
	if value, ok := tc.mutation.Category(); ok {
		_spec.SetField(turtle.FieldCategory, field.TypeInt32, value)
		_node.Category = value
	}
	if value, ok := tc.mutation.Creator(); ok {
		_spec.SetField(turtle.FieldCreator, field.TypeString, value)
		_node.Creator = value
	}
	if value, ok := tc.mutation.State(); ok {
		_spec.SetField(turtle.FieldState, field.TypeInt32, value)
		_node.State = value
	}
	if value, ok := tc.mutation.Ctime(); ok {
		_spec.SetField(turtle.FieldCtime, field.TypeTime, value)
		_node.Ctime = value
	}
	if value, ok := tc.mutation.Mtime(); ok {
		_spec.SetField(turtle.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	return _node, _spec
}

// TurtleCreateBulk is the builder for creating many Turtle entities in bulk.
type TurtleCreateBulk struct {
	config
	err      error
	builders []*TurtleCreate
}

// Save creates the Turtle entities in the database.
func (tcb *TurtleCreateBulk) Save(ctx context.Context) ([]*Turtle, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Turtle, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TurtleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TurtleCreateBulk) SaveX(ctx context.Context) []*Turtle {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TurtleCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TurtleCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
