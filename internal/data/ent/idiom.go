// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"xiuyiPro/internal/data/ent/idiom"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Idiom is the model entity for the Idiom schema.
type Idiom struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Iid holds the value of the "iid" field.
	Iid string `json:"iid,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer string `json:"answer,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// Difficulty holds the value of the "difficulty" field.
	Difficulty int32 `json:"difficulty,omitempty"`
	// Creator holds the value of the "creator" field.
	Creator string `json:"creator,omitempty"`
	// State holds the value of the "state" field.
	State int32 `json:"state,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime time.Time `json:"ctime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime        time.Time `json:"mtime,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Idiom) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case idiom.FieldID, idiom.FieldDifficulty, idiom.FieldState:
			values[i] = new(sql.NullInt64)
		case idiom.FieldIid, idiom.FieldAnswer, idiom.FieldImage, idiom.FieldCreator:
			values[i] = new(sql.NullString)
		case idiom.FieldCtime, idiom.FieldMtime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Idiom fields.
func (i *Idiom) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case idiom.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int64(value.Int64)
		case idiom.FieldIid:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field iid", values[j])
			} else if value.Valid {
				i.Iid = value.String
			}
		case idiom.FieldAnswer:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[j])
			} else if value.Valid {
				i.Answer = value.String
			}
		case idiom.FieldImage:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[j])
			} else if value.Valid {
				i.Image = value.String
			}
		case idiom.FieldDifficulty:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field difficulty", values[j])
			} else if value.Valid {
				i.Difficulty = int32(value.Int64)
			}
		case idiom.FieldCreator:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field creator", values[j])
			} else if value.Valid {
				i.Creator = value.String
			}
		case idiom.FieldState:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[j])
			} else if value.Valid {
				i.State = int32(value.Int64)
			}
		case idiom.FieldCtime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[j])
			} else if value.Valid {
				i.Ctime = value.Time
			}
		case idiom.FieldMtime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[j])
			} else if value.Valid {
				i.Mtime = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Idiom.
// This includes values selected through modifiers, order, etc.
func (i *Idiom) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Idiom.
// Note that you need to call Idiom.Unwrap() before calling this method if this Idiom
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Idiom) Update() *IdiomUpdateOne {
	return NewIdiomClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Idiom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Idiom) Unwrap() *Idiom {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Idiom is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Idiom) String() string {
	var builder strings.Builder
	builder.WriteString("Idiom(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("iid=")
	builder.WriteString(i.Iid)
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(i.Answer)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(i.Image)
	builder.WriteString(", ")
	builder.WriteString("difficulty=")
	builder.WriteString(fmt.Sprintf("%v", i.Difficulty))
	builder.WriteString(", ")
	builder.WriteString("creator=")
	builder.WriteString(i.Creator)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(fmt.Sprintf("%v", i.State))
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(i.Ctime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(i.Mtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Idioms is a parsable slice of Idiom.
type Idioms []*Idiom
