// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"xiuyiPro/internal/data/ent/idiom"
	"xiuyiPro/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IdiomUpdate is the builder for updating Idiom entities.
type IdiomUpdate struct {
	config
	hooks    []Hook
	mutation *IdiomMutation
}

// Where appends a list predicates to the IdiomUpdate builder.
func (iu *IdiomUpdate) Where(ps ...predicate.Idiom) *IdiomUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetIid sets the "iid" field.
func (iu *IdiomUpdate) SetIid(s string) *IdiomUpdate {
	iu.mutation.SetIid(s)
	return iu
}

// SetNillableIid sets the "iid" field if the given value is not nil.
func (iu *IdiomUpdate) SetNillableIid(s *string) *IdiomUpdate {
	if s != nil {
		iu.SetIid(*s)
	}
	return iu
}

// SetName sets the "name" field.
func (iu *IdiomUpdate) SetName(s string) *IdiomUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *IdiomUpdate) SetNillableName(s *string) *IdiomUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetImage sets the "image" field.
func (iu *IdiomUpdate) SetImage(s string) *IdiomUpdate {
	iu.mutation.SetImage(s)
	return iu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (iu *IdiomUpdate) SetNillableImage(s *string) *IdiomUpdate {
	if s != nil {
		iu.SetImage(*s)
	}
	return iu
}

// SetDifficulty sets the "difficulty" field.
func (iu *IdiomUpdate) SetDifficulty(i int32) *IdiomUpdate {
	iu.mutation.ResetDifficulty()
	iu.mutation.SetDifficulty(i)
	return iu
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (iu *IdiomUpdate) SetNillableDifficulty(i *int32) *IdiomUpdate {
	if i != nil {
		iu.SetDifficulty(*i)
	}
	return iu
}

// AddDifficulty adds i to the "difficulty" field.
func (iu *IdiomUpdate) AddDifficulty(i int32) *IdiomUpdate {
	iu.mutation.AddDifficulty(i)
	return iu
}

// SetCreator sets the "creator" field.
func (iu *IdiomUpdate) SetCreator(s string) *IdiomUpdate {
	iu.mutation.SetCreator(s)
	return iu
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (iu *IdiomUpdate) SetNillableCreator(s *string) *IdiomUpdate {
	if s != nil {
		iu.SetCreator(*s)
	}
	return iu
}

// SetState sets the "state" field.
func (iu *IdiomUpdate) SetState(i int32) *IdiomUpdate {
	iu.mutation.ResetState()
	iu.mutation.SetState(i)
	return iu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (iu *IdiomUpdate) SetNillableState(i *int32) *IdiomUpdate {
	if i != nil {
		iu.SetState(*i)
	}
	return iu
}

// AddState adds i to the "state" field.
func (iu *IdiomUpdate) AddState(i int32) *IdiomUpdate {
	iu.mutation.AddState(i)
	return iu
}

// SetCtime sets the "ctime" field.
func (iu *IdiomUpdate) SetCtime(t time.Time) *IdiomUpdate {
	iu.mutation.SetCtime(t)
	return iu
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (iu *IdiomUpdate) SetNillableCtime(t *time.Time) *IdiomUpdate {
	if t != nil {
		iu.SetCtime(*t)
	}
	return iu
}

// SetMtime sets the "mtime" field.
func (iu *IdiomUpdate) SetMtime(t time.Time) *IdiomUpdate {
	iu.mutation.SetMtime(t)
	return iu
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (iu *IdiomUpdate) SetNillableMtime(t *time.Time) *IdiomUpdate {
	if t != nil {
		iu.SetMtime(*t)
	}
	return iu
}

// Mutation returns the IdiomMutation object of the builder.
func (iu *IdiomUpdate) Mutation() *IdiomMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdiomUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdiomUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdiomUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdiomUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *IdiomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(idiom.Table, idiom.Columns, sqlgraph.NewFieldSpec(idiom.FieldID, field.TypeInt64))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Iid(); ok {
		_spec.SetField(idiom.FieldIid, field.TypeString, value)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(idiom.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Image(); ok {
		_spec.SetField(idiom.FieldImage, field.TypeString, value)
	}
	if value, ok := iu.mutation.Difficulty(); ok {
		_spec.SetField(idiom.FieldDifficulty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedDifficulty(); ok {
		_spec.AddField(idiom.FieldDifficulty, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.Creator(); ok {
		_spec.SetField(idiom.FieldCreator, field.TypeString, value)
	}
	if value, ok := iu.mutation.State(); ok {
		_spec.SetField(idiom.FieldState, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.AddedState(); ok {
		_spec.AddField(idiom.FieldState, field.TypeInt32, value)
	}
	if value, ok := iu.mutation.Ctime(); ok {
		_spec.SetField(idiom.FieldCtime, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Mtime(); ok {
		_spec.SetField(idiom.FieldMtime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{idiom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IdiomUpdateOne is the builder for updating a single Idiom entity.
type IdiomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdiomMutation
}

// SetIid sets the "iid" field.
func (iuo *IdiomUpdateOne) SetIid(s string) *IdiomUpdateOne {
	iuo.mutation.SetIid(s)
	return iuo
}

// SetNillableIid sets the "iid" field if the given value is not nil.
func (iuo *IdiomUpdateOne) SetNillableIid(s *string) *IdiomUpdateOne {
	if s != nil {
		iuo.SetIid(*s)
	}
	return iuo
}

// SetName sets the "name" field.
func (iuo *IdiomUpdateOne) SetName(s string) *IdiomUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *IdiomUpdateOne) SetNillableName(s *string) *IdiomUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetImage sets the "image" field.
func (iuo *IdiomUpdateOne) SetImage(s string) *IdiomUpdateOne {
	iuo.mutation.SetImage(s)
	return iuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (iuo *IdiomUpdateOne) SetNillableImage(s *string) *IdiomUpdateOne {
	if s != nil {
		iuo.SetImage(*s)
	}
	return iuo
}

// SetDifficulty sets the "difficulty" field.
func (iuo *IdiomUpdateOne) SetDifficulty(i int32) *IdiomUpdateOne {
	iuo.mutation.ResetDifficulty()
	iuo.mutation.SetDifficulty(i)
	return iuo
}

// SetNillableDifficulty sets the "difficulty" field if the given value is not nil.
func (iuo *IdiomUpdateOne) SetNillableDifficulty(i *int32) *IdiomUpdateOne {
	if i != nil {
		iuo.SetDifficulty(*i)
	}
	return iuo
}

// AddDifficulty adds i to the "difficulty" field.
func (iuo *IdiomUpdateOne) AddDifficulty(i int32) *IdiomUpdateOne {
	iuo.mutation.AddDifficulty(i)
	return iuo
}

// SetCreator sets the "creator" field.
func (iuo *IdiomUpdateOne) SetCreator(s string) *IdiomUpdateOne {
	iuo.mutation.SetCreator(s)
	return iuo
}

// SetNillableCreator sets the "creator" field if the given value is not nil.
func (iuo *IdiomUpdateOne) SetNillableCreator(s *string) *IdiomUpdateOne {
	if s != nil {
		iuo.SetCreator(*s)
	}
	return iuo
}

// SetState sets the "state" field.
func (iuo *IdiomUpdateOne) SetState(i int32) *IdiomUpdateOne {
	iuo.mutation.ResetState()
	iuo.mutation.SetState(i)
	return iuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (iuo *IdiomUpdateOne) SetNillableState(i *int32) *IdiomUpdateOne {
	if i != nil {
		iuo.SetState(*i)
	}
	return iuo
}

// AddState adds i to the "state" field.
func (iuo *IdiomUpdateOne) AddState(i int32) *IdiomUpdateOne {
	iuo.mutation.AddState(i)
	return iuo
}

// SetCtime sets the "ctime" field.
func (iuo *IdiomUpdateOne) SetCtime(t time.Time) *IdiomUpdateOne {
	iuo.mutation.SetCtime(t)
	return iuo
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (iuo *IdiomUpdateOne) SetNillableCtime(t *time.Time) *IdiomUpdateOne {
	if t != nil {
		iuo.SetCtime(*t)
	}
	return iuo
}

// SetMtime sets the "mtime" field.
func (iuo *IdiomUpdateOne) SetMtime(t time.Time) *IdiomUpdateOne {
	iuo.mutation.SetMtime(t)
	return iuo
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (iuo *IdiomUpdateOne) SetNillableMtime(t *time.Time) *IdiomUpdateOne {
	if t != nil {
		iuo.SetMtime(*t)
	}
	return iuo
}

// Mutation returns the IdiomMutation object of the builder.
func (iuo *IdiomUpdateOne) Mutation() *IdiomMutation {
	return iuo.mutation
}

// Where appends a list predicates to the IdiomUpdate builder.
func (iuo *IdiomUpdateOne) Where(ps ...predicate.Idiom) *IdiomUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdiomUpdateOne) Select(field string, fields ...string) *IdiomUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Idiom entity.
func (iuo *IdiomUpdateOne) Save(ctx context.Context) (*Idiom, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdiomUpdateOne) SaveX(ctx context.Context) *Idiom {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdiomUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdiomUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *IdiomUpdateOne) sqlSave(ctx context.Context) (_node *Idiom, err error) {
	_spec := sqlgraph.NewUpdateSpec(idiom.Table, idiom.Columns, sqlgraph.NewFieldSpec(idiom.FieldID, field.TypeInt64))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Idiom.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, idiom.FieldID)
		for _, f := range fields {
			if !idiom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != idiom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Iid(); ok {
		_spec.SetField(idiom.FieldIid, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(idiom.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Image(); ok {
		_spec.SetField(idiom.FieldImage, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Difficulty(); ok {
		_spec.SetField(idiom.FieldDifficulty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedDifficulty(); ok {
		_spec.AddField(idiom.FieldDifficulty, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.Creator(); ok {
		_spec.SetField(idiom.FieldCreator, field.TypeString, value)
	}
	if value, ok := iuo.mutation.State(); ok {
		_spec.SetField(idiom.FieldState, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.AddedState(); ok {
		_spec.AddField(idiom.FieldState, field.TypeInt32, value)
	}
	if value, ok := iuo.mutation.Ctime(); ok {
		_spec.SetField(idiom.FieldCtime, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Mtime(); ok {
		_spec.SetField(idiom.FieldMtime, field.TypeTime, value)
	}
	_node = &Idiom{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{idiom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
