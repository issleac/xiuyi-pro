// Code generated by ent, DO NOT EDIT.

package idiom

import (
	"time"
	"xiuyiPro/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldID, id))
}

// Iid applies equality check predicate on the "iid" field. It's identical to IidEQ.
func Iid(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldIid, v))
}

// Answer applies equality check predicate on the "answer" field. It's identical to AnswerEQ.
func Answer(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldAnswer, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldImage, v))
}

// Difficulty applies equality check predicate on the "difficulty" field. It's identical to DifficultyEQ.
func Difficulty(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldDifficulty, v))
}

// Creator applies equality check predicate on the "creator" field. It's identical to CreatorEQ.
func Creator(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldCreator, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldState, v))
}

// Ctime applies equality check predicate on the "ctime" field. It's identical to CtimeEQ.
func Ctime(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldCtime, v))
}

// Mtime applies equality check predicate on the "mtime" field. It's identical to MtimeEQ.
func Mtime(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldMtime, v))
}

// IidEQ applies the EQ predicate on the "iid" field.
func IidEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldIid, v))
}

// IidNEQ applies the NEQ predicate on the "iid" field.
func IidNEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldIid, v))
}

// IidIn applies the In predicate on the "iid" field.
func IidIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldIid, vs...))
}

// IidNotIn applies the NotIn predicate on the "iid" field.
func IidNotIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldIid, vs...))
}

// IidGT applies the GT predicate on the "iid" field.
func IidGT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldIid, v))
}

// IidGTE applies the GTE predicate on the "iid" field.
func IidGTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldIid, v))
}

// IidLT applies the LT predicate on the "iid" field.
func IidLT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldIid, v))
}

// IidLTE applies the LTE predicate on the "iid" field.
func IidLTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldIid, v))
}

// IidContains applies the Contains predicate on the "iid" field.
func IidContains(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContains(FieldIid, v))
}

// IidHasPrefix applies the HasPrefix predicate on the "iid" field.
func IidHasPrefix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasPrefix(FieldIid, v))
}

// IidHasSuffix applies the HasSuffix predicate on the "iid" field.
func IidHasSuffix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasSuffix(FieldIid, v))
}

// IidEqualFold applies the EqualFold predicate on the "iid" field.
func IidEqualFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEqualFold(FieldIid, v))
}

// IidContainsFold applies the ContainsFold predicate on the "iid" field.
func IidContainsFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContainsFold(FieldIid, v))
}

// AnswerEQ applies the EQ predicate on the "answer" field.
func AnswerEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldAnswer, v))
}

// AnswerNEQ applies the NEQ predicate on the "answer" field.
func AnswerNEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldAnswer, v))
}

// AnswerIn applies the In predicate on the "answer" field.
func AnswerIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldAnswer, vs...))
}

// AnswerNotIn applies the NotIn predicate on the "answer" field.
func AnswerNotIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldAnswer, vs...))
}

// AnswerGT applies the GT predicate on the "answer" field.
func AnswerGT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldAnswer, v))
}

// AnswerGTE applies the GTE predicate on the "answer" field.
func AnswerGTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldAnswer, v))
}

// AnswerLT applies the LT predicate on the "answer" field.
func AnswerLT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldAnswer, v))
}

// AnswerLTE applies the LTE predicate on the "answer" field.
func AnswerLTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldAnswer, v))
}

// AnswerContains applies the Contains predicate on the "answer" field.
func AnswerContains(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContains(FieldAnswer, v))
}

// AnswerHasPrefix applies the HasPrefix predicate on the "answer" field.
func AnswerHasPrefix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasPrefix(FieldAnswer, v))
}

// AnswerHasSuffix applies the HasSuffix predicate on the "answer" field.
func AnswerHasSuffix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasSuffix(FieldAnswer, v))
}

// AnswerEqualFold applies the EqualFold predicate on the "answer" field.
func AnswerEqualFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEqualFold(FieldAnswer, v))
}

// AnswerContainsFold applies the ContainsFold predicate on the "answer" field.
func AnswerContainsFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContainsFold(FieldAnswer, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContainsFold(FieldImage, v))
}

// DifficultyEQ applies the EQ predicate on the "difficulty" field.
func DifficultyEQ(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldDifficulty, v))
}

// DifficultyNEQ applies the NEQ predicate on the "difficulty" field.
func DifficultyNEQ(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldDifficulty, v))
}

// DifficultyIn applies the In predicate on the "difficulty" field.
func DifficultyIn(vs ...int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldDifficulty, vs...))
}

// DifficultyNotIn applies the NotIn predicate on the "difficulty" field.
func DifficultyNotIn(vs ...int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldDifficulty, vs...))
}

// DifficultyGT applies the GT predicate on the "difficulty" field.
func DifficultyGT(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldDifficulty, v))
}

// DifficultyGTE applies the GTE predicate on the "difficulty" field.
func DifficultyGTE(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldDifficulty, v))
}

// DifficultyLT applies the LT predicate on the "difficulty" field.
func DifficultyLT(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldDifficulty, v))
}

// DifficultyLTE applies the LTE predicate on the "difficulty" field.
func DifficultyLTE(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldDifficulty, v))
}

// CreatorEQ applies the EQ predicate on the "creator" field.
func CreatorEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldCreator, v))
}

// CreatorNEQ applies the NEQ predicate on the "creator" field.
func CreatorNEQ(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldCreator, v))
}

// CreatorIn applies the In predicate on the "creator" field.
func CreatorIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldCreator, vs...))
}

// CreatorNotIn applies the NotIn predicate on the "creator" field.
func CreatorNotIn(vs ...string) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldCreator, vs...))
}

// CreatorGT applies the GT predicate on the "creator" field.
func CreatorGT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldCreator, v))
}

// CreatorGTE applies the GTE predicate on the "creator" field.
func CreatorGTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldCreator, v))
}

// CreatorLT applies the LT predicate on the "creator" field.
func CreatorLT(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldCreator, v))
}

// CreatorLTE applies the LTE predicate on the "creator" field.
func CreatorLTE(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldCreator, v))
}

// CreatorContains applies the Contains predicate on the "creator" field.
func CreatorContains(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContains(FieldCreator, v))
}

// CreatorHasPrefix applies the HasPrefix predicate on the "creator" field.
func CreatorHasPrefix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasPrefix(FieldCreator, v))
}

// CreatorHasSuffix applies the HasSuffix predicate on the "creator" field.
func CreatorHasSuffix(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldHasSuffix(FieldCreator, v))
}

// CreatorEqualFold applies the EqualFold predicate on the "creator" field.
func CreatorEqualFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldEqualFold(FieldCreator, v))
}

// CreatorContainsFold applies the ContainsFold predicate on the "creator" field.
func CreatorContainsFold(v string) predicate.Idiom {
	return predicate.Idiom(sql.FieldContainsFold(FieldCreator, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int32) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldState, v))
}

// CtimeEQ applies the EQ predicate on the "ctime" field.
func CtimeEQ(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldCtime, v))
}

// CtimeNEQ applies the NEQ predicate on the "ctime" field.
func CtimeNEQ(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldCtime, v))
}

// CtimeIn applies the In predicate on the "ctime" field.
func CtimeIn(vs ...time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldCtime, vs...))
}

// CtimeNotIn applies the NotIn predicate on the "ctime" field.
func CtimeNotIn(vs ...time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldCtime, vs...))
}

// CtimeGT applies the GT predicate on the "ctime" field.
func CtimeGT(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldCtime, v))
}

// CtimeGTE applies the GTE predicate on the "ctime" field.
func CtimeGTE(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldCtime, v))
}

// CtimeLT applies the LT predicate on the "ctime" field.
func CtimeLT(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldCtime, v))
}

// CtimeLTE applies the LTE predicate on the "ctime" field.
func CtimeLTE(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldCtime, v))
}

// MtimeEQ applies the EQ predicate on the "mtime" field.
func MtimeEQ(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldEQ(FieldMtime, v))
}

// MtimeNEQ applies the NEQ predicate on the "mtime" field.
func MtimeNEQ(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldNEQ(FieldMtime, v))
}

// MtimeIn applies the In predicate on the "mtime" field.
func MtimeIn(vs ...time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldIn(FieldMtime, vs...))
}

// MtimeNotIn applies the NotIn predicate on the "mtime" field.
func MtimeNotIn(vs ...time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldNotIn(FieldMtime, vs...))
}

// MtimeGT applies the GT predicate on the "mtime" field.
func MtimeGT(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldGT(FieldMtime, v))
}

// MtimeGTE applies the GTE predicate on the "mtime" field.
func MtimeGTE(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldGTE(FieldMtime, v))
}

// MtimeLT applies the LT predicate on the "mtime" field.
func MtimeLT(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldLT(FieldMtime, v))
}

// MtimeLTE applies the LTE predicate on the "mtime" field.
func MtimeLTE(v time.Time) predicate.Idiom {
	return predicate.Idiom(sql.FieldLTE(FieldMtime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Idiom) predicate.Idiom {
	return predicate.Idiom(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Idiom) predicate.Idiom {
	return predicate.Idiom(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Idiom) predicate.Idiom {
	return predicate.Idiom(sql.NotPredicates(p))
}
