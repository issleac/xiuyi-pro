// Code generated by ent, DO NOT EDIT.

package idiom

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the idiom type in the database.
	Label = "idiom"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldIid holds the string denoting the iid field in the database.
	FieldIid = "iid"
	// FieldAnswer holds the string denoting the answer field in the database.
	FieldAnswer = "answer"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldCreator holds the string denoting the creator field in the database.
	FieldCreator = "creator"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCtime holds the string denoting the ctime field in the database.
	FieldCtime = "ctime"
	// FieldMtime holds the string denoting the mtime field in the database.
	FieldMtime = "mtime"
	// Table holds the table name of the idiom in the database.
	Table = "idioms"
)

// Columns holds all SQL columns for idiom fields.
var Columns = []string{
	FieldID,
	FieldIid,
	FieldAnswer,
	FieldImage,
	FieldDifficulty,
	FieldCreator,
	FieldState,
	FieldCtime,
	FieldMtime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCtime holds the default value on creation for the "ctime" field.
	DefaultCtime func() time.Time
	// DefaultMtime holds the default value on creation for the "mtime" field.
	DefaultMtime func() time.Time
)

// OrderOption defines the ordering options for the Idiom queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByIid orders the results by the iid field.
func ByIid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIid, opts...).ToFunc()
}

// ByAnswer orders the results by the answer field.
func ByAnswer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswer, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByCreator orders the results by the creator field.
func ByCreator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreator, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCtime orders the results by the ctime field.
func ByCtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCtime, opts...).ToFunc()
}

// ByMtime orders the results by the mtime field.
func ByMtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMtime, opts...).ToFunc()
}
